####
# Terraform Managed File
# --------
# DO NOT EDIT THIS FILE. This file is managed via Terraform and should not be edited directly.
# If you want to edit this file you will need to open a PR https://github.com/tf-github
####

# ========================================================================

##
# Security: Code Scan & Vulnerability Detection/Prevention
# ---
# Runs security scans, vulnerability checks and other security related processes to prevent issues
# from ever getting into the 'main' branch.
##
name: Security
on:
  pull_request:
    branches:
      - main
      - master

jobs:
  vulnerabilityAlerts:
    name: Vulnerability Alerts
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Vulnerability Alerts Action Repo
        uses: actions/checkout@v2
        with:
          repository: ShopRunner/action-vulnerability-alerts
          token: ${{ secrets.GH_ACTION_TOKEN }}
          ref: refs/tags/v0.3.0

      - name: Run the Vulnerability Alerts Action
        id: alerts
        uses: ./
        with:
          access-token: ${{ secrets.GH_ACTION_TOKEN }}
          repository: ${{ github.repository }}

      - name: Vulnerability Alert Validate Results
        uses: actions/github-script@v3
        id: vuln_status
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = ${{ steps.alerts.outputs.vulnerability_alerts }}

            Object.entries(results.nodes).forEach(([key, value]) => {
              if (value.dismissReason == null) {
                throw new Error('Vulnerability Alert Check failed');
              }
            });

            return true;

      - name: Vulnerability Alert - Status
        if: steps.vuln_status.outcome == 'failure'
        run: exit 1

      - name: Vulnerability Alert Summary
        uses: actions/github-script@v3
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const header = `
            | Package | Summary | Vulnerable Version | Vulnerable Version Range | Severity | Reference Links |
            |---------|---------|--------------------|--------------------------|----------|-----------------|
            `
            const results = ${{ steps.alerts.outputs.vulnerability_alerts }}

            const appendText = []
            Object.entries(results.nodes).forEach(([key, value]) => {
              if (value.dismissReason == null) {
                const lineItem = '|  ' + value.securityVulnerability.package.name + ' | ' + value.securityVulnerability.advisory.summary + ' | ' + value.vulnerableRequirements + ' | ' + value.securityVulnerability.vulnerableVersionRange + ' | ' + value.securityVulnerability.severity +  ' | ' + value.securityVulnerability.advisory.references.map(({ url }) => ' ' + url) + ' |'
                appendText.push(lineItem);
              }
            });

            const table = appendText.join('\n')

            const end = `
            ---

            **Author:** @${{ github.actor }}

            **Latest Commit:** ${{ github.event.pull_request.head.sha }}
            `.trim();

            const summary = header.concat(table, end);

            const result = await github.checks.create({
              head_sha: '${{ github.event.pull_request.head.sha }}',
              name: 'Vulnerability Alerts - Summary',
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.event.repository.name }}',
              conclusion: '${{ job.status }}',
              output: {
                title: 'Vulnerability Alerts - Summary',
                summary
              }
            });

            core.info(JSON.stringify(result.data));
            core.info(JSON.stringify({ status: result.status, url: result.url }));
